From fbf8069dd98557dc8040d205b7a46a4bcbf004d6 Mon Sep 17 00:00:00 2001
From: xjl12 <1062256455@qq.com>
Date: Sun, 12 Mar 2023 19:29:40 +0800
Subject: [PATCH] UdfpsView patch by @xjl12

Change-Id: I0d3ed69a7b15ba4d8e6be9c6840c6d9ac13f1a35
---
 packages/SystemUI/res/drawable/fingerprint_bg.xml  |  2 +-
 .../src/com/android/keyguard/LockIconView.java     |  2 +-
 .../systemui/biometrics/UdfpsController.java       |  7 +------
 .../systemui/biometrics/UdfpsControllerOverlay.kt  |  5 ++++-
 .../systemui/biometrics/UdfpsKeyguardView.java     |  4 ++--
 .../com/android/systemui/biometrics/UdfpsView.kt   | 14 ++++++++++++--
 6 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/packages/SystemUI/res/drawable/fingerprint_bg.xml b/packages/SystemUI/res/drawable/fingerprint_bg.xml
index 558ec08b2ceb..440eb04d02aa 100644
--- a/packages/SystemUI/res/drawable/fingerprint_bg.xml
+++ b/packages/SystemUI/res/drawable/fingerprint_bg.xml
@@ -18,7 +18,7 @@
     android:shape="oval">
 
     <solid
-      android:color="?androidprv:attr/colorSurface"/>
+      android:color="@color/system_bar_background_transparent"/>
 
     <size
         android:width="64dp"
diff --git a/packages/SystemUI/src/com/android/keyguard/LockIconView.java b/packages/SystemUI/src/com/android/keyguard/LockIconView.java
index 0a82968ae4cb..1ff8d37c1a78 100644
--- a/packages/SystemUI/src/com/android/keyguard/LockIconView.java
+++ b/packages/SystemUI/src/com/android/keyguard/LockIconView.java
@@ -118,7 +118,7 @@ public class LockIconView extends FrameLayout implements Dumpable {
      * Whether or not to render the lock icon background. Mainly used for UDPFS.
      */
     public void setUseBackground(boolean useBackground) {
-        mUseBackground = useBackground;
+        mUseBackground = false;
         updateColorAndBackgroundVisibility();
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 878cbdbbd02e..30e12ae0cb1e 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -48,7 +48,6 @@ import android.os.VibrationAttributes;
 import android.os.VibrationEffect;
 import android.provider.Settings;
 import android.os.UserHandle;
-import android.provider.Settings;
 import android.util.Log;
 import android.util.RotationUtils;
 import android.view.LayoutInflater;
@@ -65,7 +64,6 @@ import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.R;
 import com.android.systemui.animation.ActivityLaunchAnimator;
 import com.android.systemui.biometrics.dagger.BiometricsBackground;
-import com.android.systemui.biometrics.UdfpsControllerOverlay;
 import com.android.systemui.dagger.SysUISingleton;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.doze.DozeReceiver;
@@ -110,7 +108,6 @@ import kotlin.Unit;
 @SysUISingleton
 public class UdfpsController implements DozeReceiver {
     private static final String TAG = "UdfpsController";
-    private static final String HBM = "udfps_need_hbm";
     private static final long AOD_INTERRUPT_TIMEOUT_MILLIS = 1000;
 
     // Minimum required delay between consecutive touch logs in milliseconds.
@@ -768,7 +765,6 @@ public class UdfpsController implements DozeReceiver {
             mAttemptedToDismissKeyguard = false;
             mOrientationListener.enable();
             updateViewDimAmount(true);
-            Settings.System.putInt(mContext.getContentResolver(), HBM, 1);
         } else {
             Log.v(TAG, "showUdfpsOverlay | the overlay is already showing");
         }
@@ -794,7 +790,6 @@ public class UdfpsController implements DozeReceiver {
 
         mOverlay = null;
         mOrientationListener.disable();
-        Settings.System.putInt(mContext.getContentResolver(), HBM, 0);
     }
 
     /**
@@ -902,7 +897,7 @@ public class UdfpsController implements DozeReceiver {
     private void updateViewDimAmount(boolean pressed) {
         if (mFrameworkDimming) {
             if (pressed) {
-                int curBrightness = getBrightness();
+                final int curBrightness = getBrightness();
                 int i, dimAmount;
                 for (i = 0; i < mBrightnessAlphaArray.length; i++) {
                     if (mBrightnessAlphaArray[i][0] >= curBrightness) break;
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
index 69da6ec54dc1..9d9d9d0ddb4a 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
@@ -28,12 +28,14 @@ import android.hardware.biometrics.BiometricOverlayConstants.ShowReason
 import android.hardware.fingerprint.FingerprintManager
 import android.hardware.fingerprint.IUdfpsOverlayControllerCallback
 import android.os.RemoteException
+import android.provider.Settings
 import android.util.Log
 import android.util.RotationUtils
 import android.view.LayoutInflater
 import android.view.MotionEvent
 import android.view.Surface
 import android.view.View
+import android.view.WindowInsets
 import android.view.WindowManager
 import android.view.accessibility.AccessibilityManager
 import android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener
@@ -93,7 +95,7 @@ class UdfpsControllerOverlay(
     private var overlayTouchListener: TouchExplorationStateChangeListener? = null
 
     private val coreLayoutParams = WindowManager.LayoutParams(
-        WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG,
+        WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL,
         0 /* flags set in computeLayoutParams() */,
         PixelFormat.TRANSLUCENT
     ).apply {
@@ -111,6 +113,7 @@ class UdfpsControllerOverlay(
 
     fun updateDimAmount(newDimAmount: Float): Float {
         coreLayoutParams.dimAmount = newDimAmount
+
         windowManager.updateViewLayout(overlayView, coreLayoutParams)
         return newDimAmount
     }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
index bc274a0af95f..617ee9537480 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
@@ -24,6 +24,7 @@ import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.content.Context;
+import android.graphics.Color;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.util.AttributeSet;
@@ -173,8 +174,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
             return;
         }
 
-        mTextColorPrimary = Utils.getColorAttrDefaultColor(mContext,
-            android.R.attr.textColorPrimary);
+        mTextColorPrimary = Color.GRAY;
         mBgProtection.setImageDrawable(getContext().getDrawable(R.drawable.fingerprint_bg));
         mLockScreenFp.invalidate(); // updated with a valueCallback
     }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
index 9dcd2db4d3b4..06b01e810bdc 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
@@ -21,15 +21,17 @@ import android.graphics.Color
 import android.graphics.Paint
 import android.graphics.PointF
 import android.graphics.RectF
+import android.provider.Settings
 import android.util.AttributeSet
 import android.util.Log
-import android.view.MotionEvent
-import android.view.Surface
+import android.view.*
 import android.widget.FrameLayout
 import com.android.systemui.R
 import com.android.systemui.doze.DozeReceiver
 
 private const val TAG = "UdfpsView"
+private const val HBM_SWITCH = "udfps_need_hbm"
+private const val UDFPS_SWITCH = "udfps_view_state"
 
 /**
  * The main view group containing all UDFPS animations.
@@ -115,11 +117,19 @@ class UdfpsView(
     override fun onAttachedToWindow() {
         super.onAttachedToWindow()
         Log.v(TAG, "onAttachedToWindow")
+        Settings.System.putInt(context.contentResolver,UDFPS_SWITCH,1)
+    }
+
+    override fun onWindowVisibilityChanged(visibility: Int) {
+        super.onWindowVisibilityChanged(visibility)
+        Log.v(TAG, "onWindowVisibilityChanged:"+visibility)
+        Settings.System.putInt(context.contentResolver,HBM_SWITCH,if (visibility==View.VISIBLE) 1 else 0)
     }
 
     override fun onDetachedFromWindow() {
         super.onDetachedFromWindow()
         Log.v(TAG, "onDetachedFromWindow")
+        Settings.System.putInt(context.contentResolver,UDFPS_SWITCH,0)
     }
 
     override fun onDraw(canvas: Canvas) {
-- 
2.39.2


From 656be8857d529048de7cfd1ce9cd1a4bc990e88b Mon Sep 17 00:00:00 2001
From: xjl12 <1062256455@qq.com>
Date: Wed, 8 Mar 2023 14:45:08 +0800
Subject: [PATCH 1/2] UDFPS better user experience @author:xjl12

Change-Id: Idcb9a656c1d55fc238046049c1e96d0e00cfe1cd
---
 .../systemui/biometrics/UdfpsController.java  | 26 ++++---------------
 .../hidl/FingerprintEnrollClient.java         | 10 +++----
 2 files changed, 10 insertions(+), 26 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 46a4f7afe80d..878cbdbbd02e 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -110,6 +110,7 @@ import kotlin.Unit;
 @SysUISingleton
 public class UdfpsController implements DozeReceiver {
     private static final String TAG = "UdfpsController";
+    private static final String HBM = "udfps_need_hbm";
     private static final long AOD_INTERRUPT_TIMEOUT_MILLIS = 1000;
 
     // Minimum required delay between consecutive touch logs in milliseconds.
@@ -492,7 +493,7 @@ public class UdfpsController implements DozeReceiver {
                 }
 
                 Trace.endSection();
-                break;
+                // break;
 
             case MotionEvent.ACTION_MOVE:
             case MotionEvent.ACTION_HOVER_MOVE:
@@ -766,6 +767,8 @@ public class UdfpsController implements DozeReceiver {
             mOnFingerDown = false;
             mAttemptedToDismissKeyguard = false;
             mOrientationListener.enable();
+            updateViewDimAmount(true);
+            Settings.System.putInt(mContext.getContentResolver(), HBM, 1);
         } else {
             Log.v(TAG, "showUdfpsOverlay | the overlay is already showing");
         }
@@ -791,6 +794,7 @@ public class UdfpsController implements DozeReceiver {
 
         mOverlay = null;
         mOrientationListener.disable();
+        Settings.System.putInt(mContext.getContentResolver(), HBM, 0);
     }
 
     /**
@@ -948,8 +952,6 @@ public class UdfpsController implements DozeReceiver {
             return;
         }
 
-        updateViewDimAmount(true);
-
         if (!mOverlay.matchesRequestId(requestId)) {
             Log.w(TAG, "Mismatched fingerDown: " + requestId
                     + " current: " + mOverlay.getRequestId());
@@ -1034,24 +1036,6 @@ public class UdfpsController implements DozeReceiver {
             mCancelAodTimeoutAction = null;
         }
         mIsAodInterruptActive = false;
-
-        // Add a delay to ensure that the dim amount is updated after the display
-        // has had chance to switch out of HBM mode.
-        // The delay, in ms is stored in config_udfpsDimmingDisableDelay.
-        // If the delay is 0, the dim amount will be updated immediately.
-        final int delay = mContext.getResources().getInteger(
-                R.integer.config_udfpsDimmingDisableDelay);
-        if (delay > 0) {
-            mFgExecutor.executeDelayed(() -> {
-                // A race condition exists where the overlay is destroyed before the the dim amount is updated.
-                // This check ensures that the overlay is still valid.
-                if (mOverlay != null && mOverlay.matchesRequestId(requestId)) {
-                    updateViewDimAmount(false);
-                }
-            }, delay);
-        } else {
-            updateViewDimAmount(false);
-        }
     }
 
     /**
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintEnrollClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintEnrollClient.java
index 5d9af5322c2e..bffc6b337655 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintEnrollClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintEnrollClient.java
@@ -102,7 +102,7 @@ public class FingerprintEnrollClient extends EnrollClient<IBiometricsFingerprint
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getSensorId(), getOverlayReasonFromEnrollReason(mEnrollReason), this);
+        mSensorOverlays.show(getFreshDaemon(), getSensorId(), getOverlayReasonFromEnrollReason(mEnrollReason), this);
 
         BiometricNotificationUtils.cancelBadCalibrationNotification(getContext());
         try {
@@ -112,14 +112,14 @@ public class FingerprintEnrollClient extends EnrollClient<IBiometricsFingerprint
             Slog.e(TAG, "Remote exception when requesting enroll", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getSensorId());
+            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getSensorId());
+        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
 
         try {
             getFreshDaemon().cancel();
@@ -139,7 +139,7 @@ public class FingerprintEnrollClient extends EnrollClient<IBiometricsFingerprint
                 controller -> controller.onEnrollmentProgress(getSensorId(), remaining));
 
         if (remaining == 0) {
-            mSensorOverlays.hide(getSensorId());
+            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
         }
     }
 
@@ -160,7 +160,7 @@ public class FingerprintEnrollClient extends EnrollClient<IBiometricsFingerprint
     public void onError(int errorCode, int vendorCode) {
         super.onError(errorCode, vendorCode);
 
-        mSensorOverlays.hide(getSensorId());
+        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
     }
 
     @Override
-- 
2.39.2

